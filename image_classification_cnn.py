# -*- coding: utf-8 -*-
"""Image_classification_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XICVnKv_2JdgZD10aCnjcbjvdeMdwX1r
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
(X_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()
X_train.shape

x_test.shape

X_train[0]

y_train.shape
y_train[:5]

y_train = y_train.reshape(-1,)
y_train[:5]

classes = ["airplane", "automobile","bird","cat","deer","dog","frog","horse","ship","truck"]
def plot_sample(X, y, index):
  plt.figure(figsize = (15,2))
  plt.imshow(X[index])
  plt.xlabel(classes[y[index]])

plot_sample(X_train,y_train,0)  
plot_sample(X_train,y_train,7)

X_train = X_train /255
X_test = x_test / 255

ann= models.Sequential([
layers.Flatten(input_shape=(32,32,3)),
layers.Dense(3000, activation='relu'),
layers.Dense(1000, activation='relu'),
layers.Dense(10, activation='sigmoid')
])
ann.compile(optimizer='SGD',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])
ann.fit(X_train, y_train, epochs=5)

ann.evaluate(X_test, y_test)

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred=ann.predict(x_test)
y_pred_classes= [np.argmax(element) for element in y_pred]
print("Classification Report: \n", classification_report(y_test, y_pred_classes))

cnn = models.Sequential([
      # cnn
        layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(32,32,3)),
        layers.MaxPooling2D((2,2)),

        layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
      #dense
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

cnn.evaluate(X_test,y_test)

y_test= y_test.reshape(-1,)
y_test[:5]

plot_sample(X_test, y_test, 1)

y_pred = cnn.predict(x_test)
y_pred[:5]

y_classes =[np.argmax(element) for element in y_pred]
y_classes[:5]

y_test[:5]



classes[y_classes[3]]

print("Classification Report: \n", classification_report(y_test, y_classes))